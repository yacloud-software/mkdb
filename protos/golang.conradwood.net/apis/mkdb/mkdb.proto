syntax = "proto3";

package mkdb;
option go_package = "golang.conradwood.net/apis/mkdb";
option java_package = "net.conradwood.golang.apis.mkdb";
// import "golang.conradwood.net/apis/common/common.proto";
// import "golang.conradwood.net/apis/auth/auth.proto";

// preliminary definition...
message ProtoDef {
  repeated ProtoField Fields = 1;
  // e.g. "golang.conradwood.net/apis/common"
  string ImportPath = 2;
  // e.g. Measurement
  string Name = 3;
}

message ProtoField {
  string Name = 1;
  int32 Type = 2;
  bool PrimaryKey = 3;
  map<string, string> Options = 4; // options found whilst parsing, e.g. "sql_type"
}

message GetMessagesRequest {
  string ProtoFile = 1; // contents of a .proto file
}
message AMessage {
  string Name = 1;
}
message GetMessageResponse {
  repeated AMessage Messages = 1;
}
message CreateDBRequest {
  string ProtoFile = 1;     // contents of a .proto file
  string Message = 2;       // name of the message in proto file to convert to .go file
  string Package = 3;       // name of the package the gofile should live in (default is "db")
  string IDField = 4;       // default: Autodetect
  string ImportPath = 5;    // default: golang.conradwood.net/apis
  string ProtoFileName = 6; // absolute filename (required - we derive stuff from it)
  string TableName = 7;     // if empty use a default tablename dervied from protoname
  string TablePrefix =8; // prefix of tablename (prefixed to tablename, wether or not tablename is autogenerated or not)
}
message CreateDBResponse {
  string GoFile = 1; // save this to a .go file and compile it..
}

// save all files under ../db/
message FileStream {
  string Filename=1; // filename to save this under
  bytes Data=2; // the data for this file. might come in "parts", that is a filename may have multiple Data packets
}

/*
the mkdb (short for make database) will create basic accessors for a database, based on a single input protobuf.
It will create tabledefinitions and sql statements to store and delete the protobuf. To facilitate retrieval of the proto it will create basic "Getters" for each field. If the protobuf defines a field called 'ID' of type uint64 it will also create a Getter to retrieve a single proto by ID.
 */
service MKDB {
  // given the contents of a .proto file will parse it and return the messages contained in the file
  rpc GetMessages(GetMessagesRequest) returns (GetMessageResponse);
  // given a protofile and a message name will return Database Accessor helpers in a .go source file
  rpc CreateDBFile(CreateDBRequest) returns (CreateDBResponse);
  // a newer improved version which includes multiple files being generated
  rpc CreateDBFiles(CreateDBRequest) returns (stream FileStream);

}